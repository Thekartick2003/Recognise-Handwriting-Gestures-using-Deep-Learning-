import gradio as gr
import numpy as np
import cv2
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense, Conv2D, Flatten, MaxPooling2D

# Load and preprocess data
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train = x_train.reshape(-1, 28, 28, 1) / 255.0
x_test = x_test.reshape(-1, 28, 28, 1) / 255.0

# Build model
model = Sequential([
    Conv2D(32, kernel_size=3, activation='relu', input_shape=(28, 28, 1)),
    MaxPooling2D(),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(10, activation='softmax')
])

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model.fit(x_train, y_train, epochs=5, validation_split=0.1)

# Prediction function
def predict_digit(img):
    img = cv2.resize(img, (28, 28))
    img = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)
    img = 255 - img  # invert if needed
    img = img / 255.0
    img = img.reshape(1, 28, 28, 1)
    pred = model.predict(img)
    return {str(i): float(pred[0][i]) for i in range(10)}

# Gradio Interface (no shape param)
# Gradio Interface (with image upload)
interface = gr.Interface(
    fn=predict_digit,
    inputs=gr.Image(shape=(28, 28), image_mode='RGB', label="ðŸ“¤ Upload a digit image"),
    outputs=gr.Label(num_top_classes=3),
    live=False
)


interface.launch(debug=True)
